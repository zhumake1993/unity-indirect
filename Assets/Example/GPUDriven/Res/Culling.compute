
#pragma kernel Culling

#pragma enable_d3d11_debug_symbols

struct Descriptor
{
    int batchID;
    int dataOffset;
};

struct IndirectDrawIndexedArgs
{
    uint indexCountPerInstance;
    uint instanceCount;
    uint startIndex;
    uint baseVertexIndex;
    uint startInstance;
};

uint totalInstanceCount;

StructuredBuffer<Descriptor> DescriptorBuffer;
ByteAddressBuffer DataBuffer;
StructuredBuffer<int> BatchOffsetBuffer;

RWStructuredBuffer<IndirectDrawIndexedArgs> IndirectArgsBuffer;
RWStructuredBuffer<int> VisibilityBuffer;

float4x4 LoadMatrix(int offset)
{
    offset += 24;
    
    float4 p1 = asfloat(DataBuffer.Load4(offset + 0 * 16));
    float4 p2 = asfloat(DataBuffer.Load4(offset + 1 * 16));
    float4 p3 = asfloat(DataBuffer.Load4(offset + 2 * 16));

    return float4x4(
        p1.x, p1.w, p2.z, p3.y,
        p1.y, p2.x, p2.w, p3.z,
        p1.z, p2.y, p3.x, p3.w,
        0.0,  0.0,  0.0,  1.0
    );
}

#include "Culling.hlsl"

AABB LoadAABB(int offset)
{
    AABB aabb;
    
    aabb.center = asfloat(DataBuffer.Load3(offset));
    aabb.extent = asfloat(DataBuffer.Load3(offset + 12));

    return aabb;
}

[numthreads(64,1,1)]
void Culling (uint3 id : SV_DispatchThreadID)
{
    if(id.x < totalInstanceCount)
    {
        Descriptor descriptor = DescriptorBuffer[id.x];

        AABB aabb = LoadAABB(descriptor.dataOffset);
        if(Cull(aabb))
            return;

        int batchOffset = BatchOffsetBuffer[descriptor.batchID];

        int visibleCount = 0;
        InterlockedAdd(IndirectArgsBuffer[descriptor.batchID].instanceCount, 1, visibleCount);

        VisibilityBuffer[batchOffset + visibleCount] = id.x;
    }
}
